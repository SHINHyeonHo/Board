<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="board">

	<insert id="test_insert">
		insert into spring_test1(no, name, writeday) 
		values(101, '이순신', default)
	</insert>
	
	<!-- 주의해야할 사항은 리턴타입이 List<E> 이더라도 resultType 은 E 으로 해야만 한다. -->
	<select id="test_select" resultType="com.spring.model.TestVO">
		select no, name, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
		from spring_test1
		order by writeday desc
	</select>
	
	<select id="hr_select" resultType="com.spring.model.HrVO">
		select employee_id, first_name || ' ' || last_name AS ename, salary, jubun
		from employees
	</select>
	
	<resultMap type="HashMap" id="employeesMap">
		<result property="EMPLOYEE_ID" 	column="employee_id" 	javaType="String"/> <!-- property 가 HashMap 의 key 값이다. -->
		<result property="ENAME" 		column="ename" 			javaType="String"/>
		<result property="YEARPAY" 		column="yearpay" 		javaType="String"/>
		<result property="GENDER" 		column="gender" 		javaType="String"/>
		<result property="AGE" 			column="age" 			javaType="String"/>
	</resultMap>
	<select id="test_employees" resultMap="employeesMap">
		select employee_id
		     , first_name || ' ' || last_name AS ename
		     , nvl(salary*12 + salary*commission_pct, salary*12) AS yearpay
		     , case when substr(jubun, 7, 1) in('1', '3') then '남자' else '여' end AS gender
		     , extract(year from sysdate) - ( case when substr(jubun, 7,1) in('1', '2') then 1900 else 2000 end + to_number(substr(jubun, 1, 2)) ) AS age
		from employees
	</select>
	
	<!-- #### 중요 ####
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이별명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는
		 	그냥 <if test="key명"> <when test="key명"> 으로 사용한다.
	-->
	<insert id="test_insertPm" parameterType="HashMap"> <!-- java.util.HashMap 에서 패키지는 뺄수 있다. -->
		insert into spring_test1(no, name, writeday) 
		values(#{no}, #{name}, default)
	</insert>
	
	<insert id="ajaxtest_insert" parameterType="HashMap">
		insert into spring_test1(no, name, writeday)
		values(#{no}, #{name}, default)
	</insert>
	
	<!-- ======================================= 게시판 ================================================================ -->
	
	<!-- === #39. 메인 페이지용 이미지 파일ㅇ르 가져오기 === -->
	<select id="getImgfilenameList" resultType="String">
		select imgfilename
		from board_img_advertise
		order by imgno desc
	</select>
	
	<!-- === #47. 로그인 처리하기 === -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.member.model.MemberVO">
		select idx, userid, name, email, gradelevel
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
			 , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from mymvc_shopping_member 
		where status = 1 and 
			  userid = #{userid} and 
			  pwd = #{pwd}
	</select>
	<update id="setLastLoginDate" parameterType="HashMap">
		update mymvc_shopping_member set lastLoginDate = sysdate
		where userid = #{userid}
	</update>
	
   	<!-- === #57. 글쓰기(파일첨부가 없는 글쓰기) === -->
   	<insert id="add" parameterType="com.spring.board.model.BoardVO">
		insert into tblBoard(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
	    values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
   	</insert>
   
   	<!-- == #61. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 == -->
   	<!--
   	<select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
   		select seq, fk_userid, name, subject, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		from tblBoard
		where status = 1
		order by seq desc
	</select>
	-->
   
   	<!-- 먼저 #61. 을 주석처리를 하고서 아래의 작업을 한다. -->
	<!-- == #95. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기
				 전체 글목록을 보여줄때 딸린 댓글의 갯수도 보여준다.  == -->
	<select id="boardListNoSearch" resultType="com.spring.board.model.BoardVO">
   		select seq, fk_userid, name, subject
   			 , readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regDate
   			 , commentCount 
		from tblBoard
		where status = 1
		order by seq desc
	</select>
	
	<!-- #### 중요 ####
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이별명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는
		 	그냥 <if test="key명"> <when test="key명"> 으로 사용한다.
	-->
	<!-- === #103. 페이징 처리를 안한 검색어가 있는 전체 글목록 보여주기 === -->
	<select id="boardListSearch" parameterType="HashMap" resultType="com.spring.board.model.BoardVO">
	 select seq, fk_userid, name, subject,  
	        readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate,
	        commentCount
	 from tblBoard
	 where status = 1
	 <if test='searchWord != ""'>
	     and ${searchType} like '%'|| #{searchWord} ||'%'
	 </if>
	 order by seq desc
	</select>

	<!-- === #66. (댓글쓰기가 없는 평범한 게시판에서) 글 1개 보여주기 === -->
	<select id="getView" parameterType="String" resultType="com.spring.board.model.BoardVO">
		select previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate
		     , nextseq, nextsubject
		from
		(
		select lag(seq, 1) over(order by seq desc) as previousseq
		     , lag(subject, 1) over(order by seq desc) as previoussubject
		     
		     , seq, fk_userid, name, subject, content, readCount
		     , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     
		     , lead(seq, 1) over(order by seq desc) as nextseq
		     , lead(subject, 1) over(order by seq desc) as nextsubject 
		from tblBoard
		where status = 1
		) V
		where seq = #{seq}
	</select>
	
	<!-- // === $67. 글조회수 1 증가하기 === // -->
	<update id="setAddReadCount" parameterType="String">
		update tblBoard set readCount = readCount + 1
		where seq = #{seq}
	</update>
	
	<!--  === #75. 1개글 수정하기 == -->
	<update id="updateBoard" parameterType="com.spring.board.model.BoardVO">
		update tblBoard set subject = #{subject}
						  , content = #{content}
		where seq = #{seq} and pw = #{pw}
	</update>
	
	<!--  === #80. 1개글 삭제하기 == -->
	<update id="deleteBoard" parameterType="Hashmap">
		update tblBoard set status = 0
		where seq = #{seq} and pw = #{pw}
	</update>
	
	<!-- === #98. 딸린 댓글을 삭제한다.(딸린 댓글이 없을수도 있지만 실행한다.) === -->
    <update id="deleteComment" parameterType="HashMap">
    	update tblComment set status = 0
    	where parentSeq = #{seq}
    </update>

	
	<!-- === AOP 에서 사용하는 것으로 회원에게 포인트 증가를 하기 위한것. -->
	<update id="pointPlus" parameterType="Hashmap">
		update mymvc_shopping_member set point = point + to_number(#{pointPlus}) 
		where userid = #{userid} 
	</update>
	
	<!--  === #88. 댓글쓰기(tblComment 테이블에 insert) === -->
	 <insert id="addComment" parameterType="com.spring.board.model.CommentVO">
    	insert into tblComment(seq, fk_userid, name, content, regDate, parentSeq, status)
        values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
    </insert>
	 
	<!--  === #89. tblBoard 테이블에 commentCount 컬럼의 값을 1증가(update) === -->  
	<update id="updateCommentCount" parameterType="String">
    	update tblBoard set commentCount = commentCount + 1 
    	where seq = #{parentSeq}
    </update>
        
    <!-- === #93. 원게시물에 딸린 댓글 보여주기 === -->
    <select id="getCommentList" parameterType="String" resultType="com.spring.board.model.CommentVO"> 
     	select name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate 
     	from tblComment
     	where status = 1 and parentSeq = #{parentSeq}
     	order by seq desc
    </select>

	<!-- === #109. 검색어 입력시 자동글 완성하기 6 === -->
	<select id="wordSearchShow" parameterType="Hashmap" resultType="String">
		select distinct ${searchType}
		from tblBoard
		where status = 1 and lower(${searchType}) like '%'||lower(#{searchWord})||'%'
	</select>

</mapper>




